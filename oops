package javaapplication1;

import java.util.*;

public class JavaApplication1 {
    public static void main(String[] args) {
        double a1,a2,a3,b1,b2,b3,b4;
        Scanner sc= new Scanner(System.in);
        System.out.println("Enter the mark for student A in 3 subjects:");
        System.out.print("Subject 1:");
        a1=sc.nextDouble();
        System.out.print("Subject 2:");
        a2=sc.nextDouble();
        System.out.print("Subject 3:");
        a3=sc.nextDouble();
        A obj=new A(a1,a2,a3);
        System.out.println("The percentage of student A: "+obj.getpercentage()+"%");
        System.out.println("Enter the mark for student B in 4 subjects :");
        System.out.print("Subject 1:");
        b1=sc.nextDouble();
        System.out.print("Subject 2:");
        b2=sc.nextDouble();
        System.out.print("Subject 3:");
        b3=sc.nextDouble();
        System.out.print("Subject 4:");
        b4=sc.nextDouble();       
        B obj1=new B(b1,b2,b3,b4);
        System.out.println("The percentage of student B: "+obj1.getpercentage()+"%");
        
    }
}
abstract class marks
{
    public abstract double getpercentage();
}
class A extends marks{
    double m1,m2,m3,tot;
    A(double m1,double m2,double m3){
        this.m1=m1;
        this.m2=m2;
        this.m3=m3;
    }
    @Override
    public double getpercentage(){
        tot=m1+m2+m3;
        return(tot/300)*100;
    }
}
class B extends marks{
    double m1,m2,m3,m4,tot;
    B(double m1,double m2,double m3,double m4){
        this.m1=m1;
        this.m2=m2;
        this.m3=m3;
        this.m4=m4;
    }
    @Override
    public double getpercentage(){
        tot=m1+m2+m3+m4;
        return(tot/400)*100;
    }
}


Output:
Enter the mark for student A in 3 subjects:
Subject 1:100
Subject 2:98
Subject 3:99
The percentage of student A: 99.0%
Enter the mark for student B in 4 subjects :
Subject 1:85
Subject 2:87
Subject 3:98
Subject 4:99
The percentage of student B: 92.25%



java
interface QueueOperations {
    void enqueue(int item);
    int dequeue();
    int peek();
    boolean isEmpty();
    boolean isFull();
}

class MyQueue implements QueueOperations {
    private int[] queue;
    private int front;
    private int rear;

    public MyQueue(int size) {
        queue = new int[size];
        front = -1;
        rear = -1;
    }

    public void enqueue(int item) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue item.");
            return;
        }
        if (isEmpty()) {
            front = 0;
        }
        rear++;
        queue[rear] = item;
        System.out.println("Enqueued item: " + item);
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue item.");
            return -1;
        }
        int item = queue[front];
        if (front == rear) {
            front = -1;
            rear = -1;
        } else {
            front++;
        }
        System.out.println("Dequeued item: " + item);
        return item;
    }

    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot peek item.");
            return -1;
        }
        return queue[front];
    }

    public boolean isEmpty() {
        return front == -1 && rear == -1;
    }

    public boolean isFull() {
        return rear == queue.length - 1;
    }
}

OUTPUT: 
MyQueue queue = new MyQueue(5);
queue.enqueue(10);
queue.enqueue(20);
queue.enqueue(30);
queue.dequeue();
int frontItem = queue.peek();
System.out.println("Front item: " + frontItem);


